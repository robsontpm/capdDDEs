// see this file for the initialization of the library for this particular example#include "setup.h"#include <capd/ddeshelper/ddeshelperlib.h>#include <capd/ddeshelper/DDEHelperDrawing.hpp>#include <capd/ddeshelper/DDEHelperNonrigorous.hpp>using namespace std;using namespace capd;//////////////////////////////////////////////////////////////////////////////////////
int main(int argc, char** argv){	bool show_on_screen = true;	// instead of double we use interval	interval delay = 1.0;	interval a = 3.1;	interval b = 7.95;	int p = 64, n = 4;	interval h = delay / p;	IS::Grid grid(h);	IS::TimePoint tau = grid(p);	IS::TimePoint zero = grid(0);	IS::Eq eq(a, b);	IS::DDEq dde(eq, tau);	IS::Solver dde_solver(dde, 3*n);	IHelper helper(p, n, {a, b, tau}, n, 4*p);	// we use helper to get the size of the representation vectors	// we must create large enough vector to store data,	// as the size is not saved with the vector.	IVector candidate(helper.M());	// we read binary, you can also read from txt (below)	//capd::ddeshelper::readBinary("x0.ivector.bin", candidate);	ifstream input("x0.ivector.txt"); input >> candidate; input.close();	IMatrix C(helper.M(), helper.M()); C.setToIdentity();	IVector r0(helper.M()), Xi(p);	for (int i = 0; i < helper.M(); ++i) r0[i] = interval(-1, 1) * 1e-3;	for (int i = 0; i < p; ++i) Xi[i] = interval(-1, 1) * 0.5;	// make an affine set in the space (a big cube around the candidate).	IS::Solution X(grid, -tau, zero, n, {interval(0.)});	X.set_x(candidate);	X.set_Cr0(C, r0);	X.set_Xi(Xi);	// draw it	capd::ddeshelper::plot_value("rigorous-timemap-X0-", h, X, show_on_screen);	// integrate forward in time	for (int i = 0; i < 4*p; ++i)		X.move(dde_solver);	// dde_solver(X, 4*p); // docelowo	capd::ddeshelper::plot_value("rigorous-timemap-X1-", h, X, show_on_screen);//	auto Y = X.dt();//	capd::ddeshelper::plot_value("rigorous-timemap-X-prim-", h, Y, show_on_screen);	auto Y = X.subcurve(X.currentTime() - tau);	capd::ddeshelper::plot_value("rigorous-timemap-X-subcurve-", 0.1*h, Y, show_on_screen);	return 0;}
///////////////////////////////////////////
///////////////////////////////////////////

